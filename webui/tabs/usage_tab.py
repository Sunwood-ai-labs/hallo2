"""
Usage Tab Component

使用方法タブの実装
"""

import gradio as gr


def create_usage_tab():
    """
    使用方法タブを作成
    """
    with gr.Tab("📖 使用方法"):
        gr.Markdown("""
        ## 🚀 使用方法
        
        ### 1. アニメーション生成
        1. **参照画像**をアップロード（人物の顔が写った画像）
        2. **音声ファイル**をアップロード（WAVまたはMP3形式）
        3. 必要に応じて**詳細設定**を調整
        4. **アニメーション生成**ボタンをクリック
        
        ### 2. 品質向上
        1. 生成された動画または任意の動画をアップロード
        2. **品質向上設定**を調整
        3. **品質向上**ボタンをクリック
        
        ## ⚙️ パラメータ説明
        
        ### アニメーション生成パラメータ
        - **ポーズの重み**: 頭部の動きの強さ（0.0-2.0）
        - **顔の重み**: 顔の表情の強さ（0.0-2.0）
        - **唇の重み**: 口の動きの強さ（0.0-2.0）
        - **顔の拡張比率**: 顔領域の拡張比率（1.0-2.0）
        
        ### 品質向上パラメータ
        - **忠実度の重み**: 品質と忠実度のバランス（0.0-1.0）
        - **アップスケール倍率**: 解像度の向上倍率（1-4倍）
        - **顔のアップサンプリング**: 顔領域の品質向上
        - **背景アップサンプラー**: 背景の品質向上手法
        
        ## 💡 ヒント
        - 高品質な参照画像を使用することで、より良い結果が得られます
        - 音声は16kHzのサンプリングレートが推奨されます
        - 処理時間は音声の長さに比例します
        - GPUを使用することで高速化できます
        
        ## 🔧 トラブルシューティング
        
        ### よくある問題と解決策
        
        #### 1. 動画生成が失敗する場合
        - 参照画像に顔が明確に写っているか確認
        - 音声ファイルの形式がサポートされているか確認（WAV、MP3）
        - GPUメモリが不足していないか確認
        
        #### 2. 品質向上が機能しない場合
        - 入力動画の形式が正しいか確認
        - アップスケール倍率を下げて試行
        - システムリソースの使用状況を確認
        
        #### 3. 処理速度が遅い場合
        - GPUが利用可能か確認
        - 音声の長さを短くして試行
        - 他のアプリケーションを終了してリソースを確保
        
        ## 📊 システム要件
        
        ### 推奨環境
        - **GPU**: NVIDIA GPU（CUDA対応）
        - **VRAM**: 8GB以上推奨
        - **RAM**: 16GB以上推奨
        - **Python**: 3.8以上
        
        ### サポートファイル形式
        - **画像**: JPG, PNG, BMP
        - **音声**: WAV, MP3, M4A
        - **動画**: MP4, AVI, MOV
        """)
    
        # タブの内容は上記で定義済み
        pass
